esphome:
  name: bbq_monitor

esp32:
  variant: esp32s3
  board: esp32-s3-devkitc-1
  framework:
    type: arduino
# SPI-Bus (MAX31856 + SSD1322 + MAX31856_2)
spi:
  - id: spi1
    clk_pin: GPIO5
    mosi_pin: GPIO7
    miso_pin: GPIO15
    interface: spi2
# SPI2 → MAX31856_3 + MAX31856_4 + MAX31856_5
  - id: spi2
    clk_pin: GPIO10
    mosi_pin: GPIO11
    miso_pin: GPIO12
    interface: spi3
    
sensor:
  - platform: adc
    pin: GPIO4
    id: battery_voltage_raw
    update_interval: 5s
    attenuation: 11db
    filters:
      - multiply: 2.0   # Spannungsteiler z.B. 1:1, anpassen
    unit_of_measurement: "V"
  # Sensor 1 an SPI1
  - platform: max31856
    name: "Temperatur 1"
    id: bbq_temp1
    cs_pin: GPIO2
    spi_id: spi1
    update_interval: 5s

  # Sensor 2 an SPI2
  - platform: max31856
    name: "Temperatur 2"
    id: bbq_temp2
    cs_pin: GPIO16
    spi_id: spi1
    update_interval: 5s

  # Sensor 3 an SPI2
  - platform: max31856
    name: "Temperatur 3"
    id: bbq_temp3
    cs_pin: GPIO17
    spi_id: spi2
    update_interval: 5s

  # Sensor 4 an SPI3
  - platform: max31856
    name: "Temperatur 4"
    id: bbq_temp4
    cs_pin: GPIO6
    spi_id: spi2
    update_interval: 5s

  # Sensor 5 an SPI3
  - platform: max31856
    name: "Temperatur 5"
    id: bbq_temp5
    cs_pin: GPIO18
    spi_id: spi2
    update_interval: 5s

# Input Number für eigene Wunschtemperaturen
number:
  - platform: template
    name: "BBQ Wunschtemperatur 1"
    id: bbq_target1
    min_value: 30
    max_value: 100
    step: 1
    optimistic: true
    initial_value: 57   # Medium

  - platform: template
    name: "BBQ Wunschtemperatur 2"
    id: bbq_target2
    min_value: 30
    max_value: 100
    step: 1
    optimistic: true
    initial_value: 57   # Medium

  - platform: template
    name: "BBQ Wunschtemperatur 3"
    id: bbq_target3
    min_value: 30
    max_value: 100
    step: 1
    optimistic: true
    initial_value: 57   # Medium

  - platform: template
    name: "BBQ Wunschtemperatur 4"
    id: bbq_target4
    min_value: 30
    max_value: 100
    step: 1
    optimistic: true
    initial_value: 57   # Medium

  - platform: template
    name: "BBQ Wunschtemperatur 5"
    id: bbq_target5
    min_value: 30
    max_value: 100
    step: 1
    optimistic: true
    initial_value: 57   # Medium

# Taster (GPIOs beliebig anpassen)
binary_sensor:
  - platform: gpio
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: True
    name: "Sensor wechseln"
    id: btn_next_sensor
    on_press:
      then:
        - lambda: |-
            id(active_sensor)++;
            if(id(active_sensor) > 5) id(active_sensor) = 1;
  - platform: status
    name: "Home Assistant Verbindung"
    id: ha_connected

  - platform: gpio
    pin:
      number: GPIO36
      mode: INPUT_PULLUP
      inverted: True
    name: "Garstufe wechseln"
    id: btn_change_stage
    on_press:
      then:
        - lambda: |-
            id(active_stage)++;
            if(id(active_stage) > 6) id(active_stage) = 1;


interval:
  - interval: 5s
    then:
      - lambda: |-
          // 8,4 V LiIon -> Prozent (0–100%)
          float v = id(battery_voltage_raw).state;
          int pct = (int)((v / 8.4) * 100.0);
          if(pct > 100) pct = 100;
          if(pct < 0) pct = 0;
          id(battery_percent) = pct;
    

# Globals für aktiven Sensor und Garstufe
globals:
  - id: active_sensor
    type: int
    restore_value: yes
    initial_value: '1'
  - id: active_stage
    type: int
    restore_value: yes
    initial_value: '1'
  - id: battery_percent
    type: int
    restore_value: no


# Fonts (Google Fonts)
font:
  - file: "gfonts://Roboto"
    id: font_small
    size: 12
  - file: "gfonts://Roboto"
    id: font_large
    size: 18
  - file: "gfonts://Roboto"
    id: font_stage
    size: 14

display:
  - platform: ssd1322_spi
    model: "SSD1322 256x64"
    spi_id: spi1
    cs_pin: GPIO8
    dc_pin: GPIO1
    reset_pin: GPIO35
    lambda: |-
      // --- Spalte 1: Geräteinfo ---
      it.printf(0, 0, id(font_small), "BBQ");
      it.printf(0, 12, id(font_small), "Thermometer");

      // Akkustand
      it.printf(0, 24, id(font_small), "Akku: %d%%", id(battery_percent));

      // --- Arrays für Sensoren ---
      float temps[5] = { id(bbq_temp1).state, id(bbq_temp2).state, id(bbq_temp3).state, id(bbq_temp4).state, id(bbq_temp5).state };
      float targets[5] = { id(bbq_target1).state, id(bbq_target2).state, id(bbq_target3).state, id(bbq_target4).state, id(bbq_target5).state };

      // Funktion für Soll-Garstufe
      auto get_stage = [](float target) -> const char* {
        if (target < 50) return "R";
        else if (target < 55) return "MR";
        else if (target < 60) return "M";
        else if (target < 65) return "MW";
        else if (target <= 100) return "WD";
        else return "E"; // Eigen
      };

      // --- Spalte 2: Sensor 1–3 ---
      int col2_x = 95;
      for(int i=0; i<3; i++){
        int y = 0 + i*18;
        it.printf(col2_x, y, id(font_small), "S%d %s %2.1f/%2.1f", i+1, get_stage(targets[i]), temps[i], targets[i]);
      }

      // --- Spalte 3: Sensor 4–5 ---
      int col3_x = 175;
      for(int i=3; i<5; i++){
        int y = 0 + (i-3)*18;
        it.printf(col3_x, y, id(font_small), "S%d %s %2.1f/%2.1f", i+1, get_stage(targets[i]), temps[i], targets[i]);
      }


# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "XXXXXXXXXXXXXXXXXXXXXXXXXXX"

ota:
  - platform: esphome
    password: "XXXXXXXXXXXXXXXXXXXXXXXXX"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Bratenthermometer"
    password: "XXXXXXXXXXXXXXXXX"

captive_portal:
